package com.sandy.common.ui ;

import java.awt.Color ;
import java.awt.Component ;
import java.awt.Container ;
import java.util.HashMap ;
import java.util.Map ;

import javax.swing.JTabbedPane ;

/**
 * This generalization of the tabbed pane provides support for highlighting 
 * a tab based on the number of alerts generated by its child components.
 */
public class HighlightableTabbedPane extends JTabbedPane {

    private static final long serialVersionUID = 1L ;
    
    // A map which contains a mapping of the child component versus the 
    // number of active alerts at any point in time.
    private Map<Component, Boolean> alertMap = new HashMap<Component, Boolean>() ;

    public HighlightableTabbedPane() {
        super( JTabbedPane.TOP ) ;
    }

    /** 
     * Adds the specified component as a tab in this tabbed pane. This method
     * delegates the actual addition of the tab to the base class and does the
     * alert housekeeping registration here.
     */
    @Override
    public void addTab( String title, Component component ) {
        super.addTab( title, component ) ;
        alertMap.put( component, false ) ;
    }

    /** 
     * Maintains the alert housekeeping data in this tab pane instance.
     * 
     * Removes the alerts associated with the specified component and 
     * traverses up the parent chain and reduces the number of alerts associated
     * with this component.
     */
    @Override
    public void remove( int index ) {
        Component comp = getComponentAt( index ) ;
        alertMap.remove( comp ) ;
        reEvaluateAlertStatus() ;
        super.remove( index ) ;
    }

    /**
     * Reevaluates the alert status based on the current component alert statuses.
     */
    public void reEvaluateAlertStatus() {
        boolean alert = false ;
        for( Boolean b : alertMap.values() ) {
            if( b ) {
                alert = true ;
                break ;
            }
        }
        alert( alert ) ;
    }
    
    /**
     * Raises an alert on behalf of the child component. It is assumed that
     * the child component is one of the added components in this tabbed pane.
     * If the child tab is not already highlighted it is highlighted by this
     * method. This method also propagates the alert along the hierarchy.
     */
    public synchronized void raiseAlert( Component child ) {
        
        boolean curAlert = alertMap.get( child ) ;
        if( !curAlert ) {
            alertMap.put( child, true ) ;
            Component[] children = getComponents() ;
            for( int i=0; i<children.length; i++ ) {
                if( children[i] == child ) {
                    setForegroundAt( i, Color.red ) ;
                }
            }
            alert( true ) ;
        }
    }
    
    /**
     * Lowers an alert on behalf of the child component. It is assumed that
     * the child component is one of the added components in this tabbed pane.
     * If the child tab is already highlighted it is de-highlighted by this
     * method. This method also propagates the alert along the hierarchy.
     */
    public synchronized void lowerAlert( Component child ) {
        
        boolean curAlert = alertMap.get( child ) ;
        if( curAlert ) {
            alertMap.put( child, false ) ;
            Component[] children = getComponents() ;
            for( int i=0; i<children.length; i++ ) {
                if( children[i] == child ) {
                    setForegroundAt( i, Color.black ) ;
                }
            }
            reEvaluateAlertStatus() ;
        }
    }
    
    /**
     * Depending upon the parameter, this function either raises or lowers an
     * alert originating from the 'alerter' component.
     */
    private void alert( boolean raise ) {
        
        HighlightableTabbedPane tabPane = null ;
        
        Component cur    = this ;
        Container parent = cur.getParent() ;
        
        // Keep traversing up the ancestor chain till we reach the root
        while( parent != null ) {
            
            // If we encounter a parent which is a highlightable tabbed pane
            // we ask it to reduce the number of alerts associated the 
            // caller child and propagate the decrease further.
            if( parent instanceof HighlightableTabbedPane ) {
                tabPane = ( HighlightableTabbedPane )parent ;
                
                if( raise ) {
                    tabPane.raiseAlert( cur ) ;
                }
                else {
                    tabPane.lowerAlert( cur ) ;
                }
                
                // Once we have handed it over to the closest ancestor which 
                // is a highlightable tab, it will take it forward. We can 
                // break out of this loop.
                break ;
            }
            cur = parent ;
            parent = parent.getParent() ;
        }
    }
}
